# https://nginx.org/en/docs/http/ngx_http_secure_link_module.html#secure_link_secret

server {
    listen 80 default_server;
    return 444;
}

server {
    listen 80;
    server_name main.com *.main.com;

    location /member {
        # The secret to be appended to the value used to create the hash.
        secure_link_secret 1234567;
        
        # If the hash provided within the URL is invalid, `$secure_link` will be replaced by an empty string.
        # The `if` must be followed by a whitespace.
        if ($secure_link = "") {
            return 403;
        }

        rewrite ^ /secure/$secure_link;
        # rewrite ^/member/(.*?)/(.*)$ /secure/$secure_link$2; # Unecessary
        # rewrite ^/member/(.*)/(.*)/(.*) /secure/$secure_link$2/$3; # Unecessary

        # URL format ->> protocol : server_name : location : hash : path and resource
        # WARNING: The full path after the hash must be specified, not just the resource `mysecret.html`.
        # Notice that the `secure_link_secret` is appended at the end of the value to digest:
        # 
        # hashlib.md5(b'static/mysecret.html1234567').hexdigest()
        # ->> 18fc51d0310620d5e555ec0d9e620194
        # ->> http://main.com/member/18fc51d0310620d5e555ec0d9e620194/static/mysecret.html
        #
        # hashlib.md5(b'files/image.png1234567').hexdigest()
        # ->> f67f67378d04c652378f0761a9b74a6d
        # ->> http://main.com/member/f67f67378d04c652378f0761a9b74a6d/files/image.png
    }

    location /secure {
        # Makes this location block only accessible internally.
        internal;
        # result: /app/secure/static/mysecret.html
        root /app;
    }

    # main.com/files/image.png?md5=xEhBu-qDI51iZvKzEb_X9Q&expires=1728529200
    location /files {
        # These two are the arguments passed through the URL, in sequence.
        secure_link $arg_md5,$arg_expires;
        # This directive describes the order of parameters in which the hash needs to be digested.
        # The usage of `:` avoids colisions.
        secure_link_md5 "1234567:$uri:$secure_link_expires";

        # If the hash provided is invalid, `$secure_link` will be replaced by an empty string.
        if ($secure_link = "") {
            return 403;
        }
        # If the hash provided has already expired,`$secure_link` will be replaced by an "0".
        if ($secure_link = "0") {
            return 403;
        }

        root /app/secure;
        # index index.html;
    }
}


