http {

    # Content Type // Extension
    # WARNING: remember to hard reload the page.
    # types {
    #     text/css    css;
    #     text/html   html;
    #     text/html   htm;
    # }
    # ->>
    # Nginx provides a file with a bunch of MIME types. You just need to include it.
    include mime.types;

    # The default routing algorithm is Round Robin.
    upstream backendservers {
        # server host.docker.internal:1111;

        server server1:8080; # server1 is the name of the container which contains the application.
        server server2:8080;
    }

    server {
        # Using nginx as a reverse proxy.
        location / {
            proxy_pass http://backendservers/;
        }

        listen 80;
        root /usr/share/nginx/html;

        location /vegetables {
            # The result path will be `/usr/share/nginx/html/vegetables` because `root` appends the location block’s URI.
            root /usr/share/nginx/html;
            # If none of the files are found, return a 404.
            # Notice how we need to specify the location block’s URI `/vegetables` because it is only appended by root.
            try_files /vegetables/veggies.html /index.html =404;
        }

        location /carbos {
            # Unlike `root`, `alias` does not append the location block's URI.
            alias /usr/share/nginx/html/vegetables;
            # Since the path context is already inside `/vegetables`:
            try_files /veggies.html =404;
        }

        # Case insensitive regex match.
        location ~* /testing/[0-9] {
            # In this case, `root` will try to serve the file /usr/share/nginx/html/index.html without appending.
            # If it can’t find that file, it will return a 404 error.
            root /usr/share/nginx/html;
            try_files /index.html =404;
        }

        # Redirecting
        location /food {
            # WARNING: if you use `/vegetables`, the redirect will happen whitout the port.
            # This works because without the leading slash (/), Nginx treats the `vegetables` path as a URI relative to the current request. Therefore, the port number in the original request is preserved in the redirect.
            return 307 vegetables;
        }

        # Outside of a location block, the `rewrite` directive is matched against all requests. It can lead to performance issues.
        rewrite ^/veg(.*)$ /vegetables$1 last;

        # In this configuration, the rewrite directive is only executed for URIs that start with 
        # /vegv2. The rest of the URI after /vegv2 is captured by (.*) and appended after /vegetables
        # in the new URI. The `last` flag stops processing further rewrite directives and starts a 
        # new search for a location matching the rewritten URI. 
        location /vegv2 {
            rewrite ^/vegv2(.*)$ /vegetables$1 last;
        }

        location ~* /number/[0-9] {
            rewrite ^/number/([0-9])$ /testing/$1 last;
        }
        # rewrite ^/number/(\w+)$ /testing/$1 last;

    }
}

events {
    
}